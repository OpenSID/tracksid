<?php

defined('BASEPATH') OR exit('No direct script access allowed');

/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Pelanggan extends Admin_Controller{

	function __construct()
	{
		parent::__construct();

		$this->load->model(['pelanggan_model', 'referensi_model']);
		$this->load->helper('url');
		$this->load->library('pagination');
		if ( ! admin_logged_in()) redirect('login');
	}

	/*
	 * Listing of pelanggan
	 */
	function index()
	{
		$params['limit'] = 20; // jumlah records per halaman
		$params['offset'] = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;

		$filter = $this->input->post('jenis');
		if (isset($filter))
		{
			$this->session->filter = $filter;
		}
		elseif (isset($this->session->filter))
		{
			$filter = $this->session->filter;
		}

		$data['pelanggan'] = $this->pelanggan_model->get_all_pelanggan($params);

		$data['combo_jenis'] =  $this->pelanggan_model->get_all_jenis();
		$data['pelaksana'] = $this->referensi_model->list_ref(PELAKSANA);
		$data['selected_filter'] = $filter;

		$this->load->view('dashboard/header');
		$this->load->view('dashboard/nav');
		$this->load->view('pelanggan/index', $data);
		$this->load->view('dashboard/footer');
	}

	// Ambil view pecahan untuk kolom aksi tabel pelanggan
	private function aksi($data)
	{
		$str = $this->load->view('pelanggan/pajax.index.php', ['data' => $data], TRUE);
    return $str;
	}

  public function ajax_list_pelanggan()
  {
    $list = $this->pelanggan_model->get_all_pelanggan();

    $data = array();
    $no = $_POST['start'];
    foreach ($list as $pelanggan)
    {
      $no++;
      $row = array();
      $row[] = $no;
      $row[] = $this->aksi($pelanggan);
      $row[] = $pelanggan['domain'];
      $row[] = $pelanggan['desa'];
      $row[] = $pelanggan['nama'];
      $row[] = $pelanggan['no_hp'];
      $row[] = $pelanggan['jenis_langganan'];
      $row[] = $pelanggan['tgl_akhir'];
      $row[] = $pelanggan['iuran_terakhir'];
      $row[] = $pelanggan['status_langganan'];
      $row[] = $pelanggan['pelaksana'];

      $data[] = $row;
    }

    $output = array
    (
      "draw" => $_POST['draw'],
      "recordsTotal" => $this->pelanggan_model->get_all_pelanggan_count(),
      "recordsFiltered" => count($list),
      "data" => $data,
    );

    //output to json format
    echo json_encode($output);
  }

	/*
	 * Adding a new pelanggan
	 */
	function form($id = null)
	{
		$data['pelanggan'] = null;

		if ($id)
		{
			$data['pelanggan'] = $this->pelanggan_model->get_pelanggan($id);
			if (empty($data['pelanggan']))
				show_error('Pelanggan itu tidak ditemukan.');
		}

		$this->load->library('form_validation');

		$this->form_validation->set_rules('domain','Domain','required|valid_url');
		$this->form_validation->set_rules('id_desa','Desa','required|integer');
		$this->form_validation->set_rules('nama','Nama','required|alpha_numeric_spaces');
		$this->form_validation->set_rules('no_hp','No. HP','required|numeric');
		$this->form_validation->set_rules('email','Email','valid_email');
		$this->form_validation->set_rules('jenis_langganan','Jenis Langganan','required|integer');
		$this->form_validation->set_rules('tgl_iuran','Tgl Iuran','required');
		$this->form_validation->set_rules('iuran_terakhir','Jumlah Iuran','required|numeric');
		$this->form_validation->set_rules('pelaksana','Pelaksana','required|alpha_numeric_spaces');

		if ($this->form_validation->run())
		{
			$params = array(
				'domain' => $this->input->post('domain'),
				'id_desa' => $this->input->post('id_desa'),
				'nama' => htmlentities($this->input->post('nama')),
				'no_hp' => $this->input->post('no_hp'),
				'jenis_langganan' => $this->input->post('jenis_langganan'),
				'tgl_iuran' => $this->input->post('tgl_iuran'),
				'iuran_terakhir' => htmlentities($this->input->post('iuran_terakhir')),
				'pelaksana' => htmlentities($this->input->post('pelaksana')),
			);

			if ($id)
				$this->pelanggan_model->update_pelanggan($id, $params);
			else
				$this->pelanggan_model->add_pelanggan($params);
			redirect('pelanggan/index');
		}

		$data['status_aktif'] = $this->referensi_model->list_ref(STATUS_AKTIF);
		$data['jenis_pelanggan'] = $this->referensi_model->list_ref(JENIS_PELANGGAN);
		$data['pelaksana'] = $this->referensi_model->list_ref(PELAKSANA);
		$this->load->view('dashboard/header');
		$this->load->view('dashboard/nav');
		$this->load->view('pelanggan/form', $data);
		$this->load->view('dashboard/footer');
	}

	public function cek_kode($kode)
	{
		$id = $this->input->post('id');
		$ada = $this->Notif_model->cek_kode($kode, $id);
		if ($ada)
		{
			$this->form_validation->set_message('cek_kode', 'Kode pelanggan itu sudah ada');
			return FALSE;
		}

		return TRUE;
	}

	/*
	 * Deleting pelanggan
	 */
	function remove($id)
	{
		$pelanggan = $this->Notif_model->get_pelanggan($id);

		// check if the pelanggan exists before trying to delete it
		if (isset($pelanggan['id']))
		{
			$this->Notif_model->delete_pelanggan($id);
			redirect('pelanggan/index');
		}
		else
			show_error('The pelanggan you are trying to delete does not exist.');
	}

	public function lock($id = 0, $aktif = 0)
	{
		$this->Notif_model->lock($id, $aktif);
		redirect("pelanggan");
	}

}